import { adminKeyboard } from "../keyboards/adminKeyboard.js";
import { TG_MANAGER_USERNAME } from "../bot.js";
import { 
    saveBuyUsdtApplication, 
    saveSellUsdtApplication, 
    saveAlipayPaymentApplication, 
    saveForeignCompanyPaymentApplication,
    saveCashAbroadApplication
} from "../db/applications.js";

export const createAppByAdminConvers = async (conversation, ctx) => {
    // First, ask for the username
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):");
    const usernameMsg = await conversation.wait();
    const username = usernameMsg.message.text;

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", {
        reply_markup: {
            keyboard: [
                [{ text: "–ö—É–ø–∏—Ç—å USDT" }],
                [{ text: "–ü—Ä–æ–¥–∞—Ç—å USDT" }],
                [{ text: "–°–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ ALIPAY" }],
                [{ text: "–û–ø–ª–∞—Ç–∞ –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω–æ–µ –Æ—Ä. –ª–∏—Ü–æ"}],
                [{ text: "–ù–∞–ª–∏—á–Ω—ã–µ –∑–∞—Ä—É–±–µ–∂–æ–º" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });

    // Get direction
    const directionMsg = await conversation.wait();
    const direction = directionMsg.message.text;

    if (direction === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }

    // Handle each direction
    if (direction === "–ö—É–ø–∏—Ç—å USDT") {
        return await handleBuyUsdt(conversation, ctx, username);
    } else if (direction === "–ü—Ä–æ–¥–∞—Ç—å USDT") {
        return await handleSellUsdt(conversation, ctx, username);
    } else if (direction === "–°–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ ALIPAY") {
        return await handleAlipayPayment(conversation, ctx, username);
    } else if (direction === "–û–ø–ª–∞—Ç–∞ –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω–æ–µ –Æ—Ä. –ª–∏—Ü–æ") {
        return await handleForeignCompanyPayment(conversation, ctx, username);
    } else if (direction === "–ù–∞–ª–∏—á–Ω—ã–µ –∑–∞—Ä—É–±–µ–∂–æ–º") {
        return await handleCashAbroad(conversation, ctx, username);
    } else {
        await ctx.reply("–í—ã–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {reply_markup: mainKeyboard});
        return;
    }
};

// Handle Buy USDT
async function handleBuyUsdt(conversation, ctx, username) {
    // Step 1: Choose currency pair
    await ctx.reply("–í—ã –æ—Ç–¥–∞—ë—Ç–µ:", {
        reply_markup: {
            keyboard: [
                [{ text: "‚ÇΩ (–†—É–±–ª—å)" }],
                [{ text: "$ (–î–æ–ª–ª–∞—Ä)" }],
                [{ text: "‚Ç¨ (–ï–≤—Ä–æ)" }],
                [{ text: "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const currencyPairMsg = await conversation.wait();
    const currencyPair = currencyPairMsg.message.text;
    
    if (currencyPair === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    if (currencyPair === "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É") {
        await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${TG_MANAGER_USERNAME}`, {reply_markup: mainKeyboard});
        return;
    }
    
    // Step 2: Enter fiat amount
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –§–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ:");
    const amountMsg = await conversation.wait();
    const amount = amountMsg.message.text;
    
    if (amount === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Step 3: Choose city
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
        reply_markup: {
            keyboard: [
                [{ text: "–ú–æ—Å–∫–≤–∞" }],
                [{ text: "–°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥" }],
                [{ text: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" }],
                [{ text: "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫" }],
                [{ text: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" }],
                [{ text: "–°–æ—á–∏" }],
                [{ text: "–ë–∞—Ä–Ω–∞—É–ª" }],
                [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const cityMsg = await conversation.wait();
    const city = cityMsg.message.text;
    
    if (city === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    let otherCity = null;
    if (city === "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:");
        const otherCityMsg = await conversation.wait();
        otherCity = otherCityMsg.message.text;
        if (otherCity === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
    }
    
    // Process application
    const selectedCity = otherCity || city;
    
    // Create application object
    const application = {
        type: "buy_usdt",
        currencyPair,
        amount,
        city: selectedCity,
        username,
        timestamp: new Date(),
    };
    
    // Save application to database
    try {
        const applicationId = await saveBuyUsdtApplication(application, username, true);
        
        await ctx.reply('üìä', {reply_markup: adminKeyboard})
        
        return { ...application, id: applicationId };
    } catch (error) {
        console.error("Error saving buy USDT application:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", {reply_markup: mainKeyboard});
        return application;
    }
}

// Handle Sell USDT
async function handleSellUsdt(conversation, ctx, username) {
    // Step 1: Choose currency pair
    await ctx.reply("–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:", {
        reply_markup: {
            keyboard: [
                [{ text: "‚ÇΩ (–†—É–±–ª—å)" }],
                [{ text: "$ (–î–æ–ª–ª–∞—Ä)" }],
                [{ text: "‚Ç¨ (–ï–≤—Ä–æ)" }],
                [{ text: "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const currencyPairMsg = await conversation.wait();
    const currencyPair = currencyPairMsg.message.text;
    
    if (currencyPair === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    if (currencyPair === "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É") {
        await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${TG_MANAGER_USERNAME}`, {reply_markup: mainKeyboard});
        return;
    }
    
    // Step 2: Enter USDT amount
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT:");
    const amountMsg = await conversation.wait();
    const amount = amountMsg.message.text;
    
    if (amount === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Step 3: Choose city
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
        reply_markup: {
            keyboard: [
                [{ text: "–ú–æ—Å–∫–≤–∞" }],
                [{ text: "–°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥" }],
                [{ text: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" }],
                [{ text: "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫" }],
                [{ text: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" }],
                [{ text: "–°–æ—á–∏" }],
                [{ text: "–ë–∞—Ä–Ω–∞—É–ª" }],
                [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const cityMsg = await conversation.wait();
    const city = cityMsg.message.text;
    
    if (city === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    let otherCity = null;
    if (city === "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:");
        const otherCityMsg = await conversation.wait();
        otherCity = otherCityMsg.message.text;
        if (otherCity === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
    }
    
    // Process application
    const selectedCity = otherCity || city;
    
    // Create application object
    const application = {
        type: "sell_usdt",
        currencyPair,
        amount,
        city: selectedCity,
        username,
        timestamp: new Date()
    };
    
    // Save application to database
    try {
        const applicationId = await saveSellUsdtApplication(application, username, true);

        await ctx.reply('üìä', {reply_markup: adminKeyboard})
        
        return { ...application, id: applicationId };
    } catch (error) {
        console.error("Error saving sell USDT application:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", {reply_markup: mainKeyboard});
        return application;
    }
}

// Handle Alipay Payment
async function handleAlipayPayment(conversation, ctx, username) {
    // Step 1: Choose payment method
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: {
            keyboard: [
                [{ text: "USDT" }],
                [{ text: "–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞" }],
                [{ text: "–ù–∞–ª–∏—á–Ω—ã–µ –ú–æ—Å–∫–≤–∞" }],
                [{ text: "–ù–∞–ª–∏—á–Ω—ã–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }],
                [{ text: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const paymentMethodMsg = await conversation.wait();
    const paymentMethod = paymentMethodMsg.message.text;
    
    if (paymentMethod === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Step 2: Enter amount in yuan
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö:");
    const amountMsg = await conversation.wait();
    const amount = amountMsg.message.text;
    
    if (amount === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Create application object
    const application = {
        type: "alipay_payment",
        paymentMethod,
        amount,
        username,
        timestamp: new Date()
    };
    
    // Save application to database
    try {
        const applicationId = await saveAlipayPaymentApplication(application, username, true);

        await ctx.reply('üìä', {reply_markup: adminKeyboard})
        
        return { ...application, id: applicationId };
    } catch (error) {
        console.error("Error saving Alipay payment application:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", {reply_markup: mainKeyboard});
        return application;
    }
}

// Handle Foreign Company Payment
async function handleForeignCompanyPayment(conversation, ctx, username) {
    // Step 1: Choose currency to give
    await ctx.reply("–í—ã –æ—Ç–¥–∞—ë—Ç–µ:", {
        reply_markup: {
            keyboard: [
                [{ text: "‚ÇΩ (–†—É–±–ª—å)" }],
                [{ text: "$ (–î–æ–ª–ª–∞—Ä)" }],
                [{ text: "‚Ç¨ (–ï–≤—Ä–æ)" }],
                [{ text: "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const sourceCurrencyMsg = await conversation.wait();
    const sourceCurrency = sourceCurrencyMsg.message.text;
    
    if (sourceCurrency === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    if (sourceCurrency === "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É") {
        await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${TG_MANAGER_USERNAME}`, {reply_markup: mainKeyboard});
        return;
    }
    
    // Step 2: Enter amount
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:");
    const amountMsg = await conversation.wait();
    const amount = amountMsg.message.text;
    
    if (amount === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Step 3: Choose destination country
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—É—á–µ–Ω–∏—è:", {
        reply_markup: {
            keyboard: [
                [{ text: "–ö–∏—Ç–∞–π" }],
                [{ text: "–î—É–±–∞–π" }],
                [{ text: "–ì–æ–Ω–∫–æ–Ω–≥" }],
                [{ text: "–î—Ä—É–≥–æ–µ" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const countryMsg = await conversation.wait();
    const country = countryMsg.message.text;
    
    if (country === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    let otherCountry = null;
    if (country === "–î—Ä—É–≥–æ–µ") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—É—á–µ–Ω–∏—è:");
        const otherCountryMsg = await conversation.wait();
        otherCountry = otherCountryMsg.message.text;
        if (otherCountry === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
    }
    
    const destinationCountry = otherCountry || country;
    
    // Create application object
    const application = {
        type: "foreign_company_payment",
        sourceCurrency,
        amount,
        destinationCountry,
        username,
        timestamp: new Date()
    };
    
    // Save application to database
    try {
        const applicationId = await saveForeignCompanyPaymentApplication(application, username, true);

        await ctx.reply('üìä', {reply_markup: adminKeyboard})
        
        return { ...application, id: applicationId };
    } catch (error) {
        console.error("Error saving foreign company payment application:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", {reply_markup: mainKeyboard});
        return application;
    }
}

// Handle Cash Abroad
async function handleCashAbroad(conversation, ctx, username) {
    // Step 1: Choose country and city
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
        reply_markup: {
            keyboard: [
                [{ text: "–¢—É—Ä—Ü–∏—è" }],
                [{ text: "–û–ê–≠" }],
                [{ text: "–¢–∞–π–ª–∞–Ω–¥" }],
                [{ text: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è" }],
                [{ text: "–Ø–ø–æ–Ω–∏—è" }],
                [{ text: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" }],
                [{ text: "–ê—Ä–º–µ–Ω–∏—è" }],
                [{ text: "–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const countryMsg = await conversation.wait();
    const country = countryMsg.message.text;
    
    if (country === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }

    // Define city options based on selected country
    let cityOptions = [];
    let selectedCountry = country;
    
    if (country === "–¢—É—Ä—Ü–∏—è") {
        cityOptions = [
            [{ text: "–°—Ç–∞–º–±—É–ª" }],
            [{ text: "–ê–Ω—Ç–∞–ª–∏—è" }],
            [{ text: "–ê–ª–∞–Ω–∏—è" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–û–ê–≠") {
        cityOptions = [
            [{ text: "–î—É–±–∞–π" }],
            [{ text: "–ê–±—É-–î–∞–±–∏" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–¢–∞–π–ª–∞–Ω–¥") {
        cityOptions = [
            [{ text: "–ë–∞–Ω–≥–∫–æ–∫" }],
            [{ text: "–ü—Ö—É–∫–µ—Ç" }],
            [{ text: "–ü–∞—Ç—Ç–∞–π—è" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–ò–Ω–¥–æ–Ω–µ–∑–∏—è") {
        cityOptions = [
            [{ text: "–ë–∞–ª–∏" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–Ø–ø–æ–Ω–∏—è") {
        cityOptions = [
            [{ text: "–¢–æ–∫–∏–æ" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω") {
        cityOptions = [
            [{ text: "–ê—Å—Ç–∞–Ω–∞" }],
            [{ text: "–ê–ª–º–∞—Ç—ã" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–ê—Ä–º–µ–Ω–∏—è") {
        cityOptions = [
            [{ text: "–ï—Ä–µ–≤–∞–Ω" }],
            [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" }]
        ];
    } else if (country === "–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–±–æ–ª–µ–µ 100 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π):");
        const otherCountryMsg = await conversation.wait();
        selectedCountry = otherCountryMsg.message.text;
        
        if (selectedCountry === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
        
        cityOptions = [
            [{ text: "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥" }]
        ];
    }
    
    // Add the "Back" button to city options
    cityOptions.push([{ text: "–ù–∞–∑–∞–¥" }]);
    
    // Let user select city
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
        reply_markup: {
            keyboard: cityOptions,
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const cityMsg = await conversation.wait();
    const city = cityMsg.message.text;
    
    if (city === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Handle "Other city" selection
    let selectedCity = city;
    if (city === "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" || city === "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
        const otherCityMsg = await conversation.wait();
        selectedCity = otherCityMsg.message.text;
        
        if (selectedCity === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
    }
    
    // Step 2: Choose payment method
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: {
            keyboard: [
                [{ text: "–†—É–±–ª—å" }],
                [{ text: "–ù–∞–ª–∏—á–Ω—ã–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ" }],
                [{ text: "USDT" }],
                [{ text: "–ù–∞–∑–∞–¥" }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    
    const paymentMethodMsg = await conversation.wait();
    const paymentMethod = paymentMethodMsg.message.text;
    
    if (paymentMethod === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // If user selected "–ù–∞–ª–∏—á–Ω—ã–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ", ask for city name
    let userCity = null;
    if (paymentMethod === "–ù–∞–ª–∏—á–Ω—ã–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞:");
        const userCityMsg = await conversation.wait();
        userCity = userCityMsg.message.text;
        
        if (userCity === "–ù–∞–∑–∞–¥") {
            await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
            return;
        }
    }
    
    // Step 3: Enter amount
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ:");
    const amountMsg = await conversation.wait();
    const amount = amountMsg.message.text;
    
    if (amount === "–ù–∞–∑–∞–¥") {
        await ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {reply_markup: adminKeyboard});
        return;
    }
    
    // Create application object
    const application = {
        type: "cash_abroad",
        country: selectedCountry,
        city: selectedCity,
        paymentMethod,
        userCity,
        amount,
        username,
        timestamp: new Date()
    };
    
    // Save application to database
    try {
        const applicationId = await saveCashAbroadApplication(application, username, true);

        await ctx.reply('üìä', {reply_markup: adminKeyboard})
        
        return { ...application, id: applicationId };
    } catch (error) {
        console.error("Error saving cash abroad application:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", {reply_markup: mainKeyboard});
        return application;
    }
}


